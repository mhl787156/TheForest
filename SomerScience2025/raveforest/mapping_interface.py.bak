import random
import sys
from typing import Tuple, List, Dict, Any, Optional
import numpy as np
import time
import traceback

from interfaces import DEFAULT_STATE, SCALE_TYPES, INSTRUMENTS, MELODIES, SCALES_TYPES_LIST, BASELINE_STYLE
import interfaces as ifc

import matplotlib.pyplot as plt
from matplotlib.colors import rgb_to_hsv


class SoundState(object):

    def __init__(self, initial_state):
        # Ensure we have default values for everything
        default_values = {
            "volume": {"melody": 1.0, "harmony": 0.5, "background": 0.3},
            "instruments": {"melody": "piano", "harmony": "flute", "background": "strings"},
            "bpm": 100,
            "melody_scale": "pentatonic",
            "melody_number": 0,
            "key": 60,
            "baseline_style": "long"
        }
        
        # Merge with provided values
        merged_state = default_values.copy()
        
        # Handle empty or None initial_state
        if initial_state:
            for key, value in initial_state.items():
                merged_state[key] = value
                
        # Set attributes
        self.volume = merged_state["volume"]
        self.instruments = merged_state["instruments"]
        self.bpm = merged_state["bpm"]
        self.melody_scale = merged_state["melody_scale"]
        self.melody_number = merged_state["melody_number"]
        self.key = merged_state["key"]
        self.baseline_style = merged_state["baseline_style"]

        ### util state var
        self.change_instrument_next_layer = "melody"
        self.change_tempo_direction = 1
        self.tempo_max = 200
        self.tempo_min = 30
        self.key_center = 60

        self.reaction_notes = []

    def __repr__(self):
        return f"{self.to_json()}"

    def to_json(self):
        return {
            "volume": self.volume,
            "instruments": self.instruments,
            "key": self.key,
            "bpm": self.bpm,
            "melody_scale": self.melody_scale,
            "melody_number": self.melody_number,
            "baseline_style": self.baseline_style,
            "reaction_notes" : self.reaction_notes,
        }
    
    def items(self):
        return self.to_json().items()

    def change_instrument(self):
        try:
            # Get current instrument
            curr_instr = self.instruments[self.change_instrument_next_layer]
            
            # Find index in INSTRUMENTS list, with fallback to piano if not found
            try:
                curr_idx = INSTRUMENTS.index(curr_instr) 
            except ValueError:
                print(f"[WARNING] Instrument {curr_instr} not found in INSTRUMENTS list, using default")
                curr_idx = 0  # Default to first instrument
                
            # Calculate next index
            new_idx = (curr_idx + 1) % len(INSTRUMENTS)
            
            # Update instrument
            self.instruments[self.change_instrument_next_layer] = INSTRUMENTS[new_idx]

            # Cycle through layers
            if self.change_instrument_next_layer == "melody":
                self.change_instrument_next_layer = "harmony"
            elif self.change_instrument_next_layer == "harmony":
                self.change_instrument_next_layer = "background"
            elif self.change_instrument_next_layer == "background":
                self.change_instrument_next_layer = "melody"
            
            return self.instruments
        except Exception as e:
            print(f"[ERROR] Error changing instrument: {e}")
            return self.instruments

    def change_tempo(self, delta:int):
        try:
            tempo = self.bpm
            change = delta * self.change_tempo_direction

            if tempo + change > self.tempo_max:
                self.change_tempo_direction = -1
            elif tempo - change < self.tempo_min:
                self.change_tempo_direction = 1

            self.bpm = tempo + delta * self.change_tempo_direction
            return self.bpm
        except Exception as e:
            print(f"[ERROR] Error changing tempo: {e}")
            return self.bpm

    def change_key(self, delta):
        try:
            self.key = self.key_center + ((self.key - self.key_center + delta) % 12)
            return self.key
        except Exception as e:
            print(f"[ERROR] Error changing key: {e}")
            return self.key

    def adjust_pitch(self, amount=3):
        """
        Adjust the pitch by a specified amount (default +3 semitones)
        This will be called when LED status is received
        """
        try:
            # Adjust reaction notes by semitones if they exist
            for i in range(len(self.reaction_notes)):
                if i < len(self.reaction_notes) and self.reaction_notes[i] > 0:  # Make sure we have a valid note
                    self.reaction_notes[i] += amount
            
            # Also adjust the base key
            self.key = self.key + amount
            return self.key
        except Exception as e:
            print(f"[ERROR] Error adjusting pitch: {e}")
            return self.key

    def change_melody(self):
        try:
            if not MELODIES:
                print("[WARNING] No melodies available")
                return 0
                
            self.melody_number = (self.melody_number + 1) % len(MELODIES)
            return self.melody_number
        except Exception as e:
            print(f"[ERROR] Error changing melody: {e}")
            return self.melody_number

    def change_scale(self):
        try:
            if self.melody_scale not in SCALES_TYPES_LIST:
                print(f"[WARNING] Scale {self.melody_scale} not in SCALES_TYPES_LIST, using first scale")
                self.melody_scale = SCALES_TYPES_LIST[0]
                
        new_idx = (SCALES_TYPES_LIST.index(self.melody_scale) + 1) % len(SCALES_TYPES_LIST)
        self.melody_scale = SCALES_TYPES_LIST[new_idx]
        return self.melody_scale
        except Exception as e:
            print(f"[ERROR] Error changing scale: {e}")
            return self.melody_scale

    def change_baseline(self):
        try:
            if self.baseline_style not in BASELINE_STYLE:
                print(f"[WARNING] Baseline style {self.baseline_style} not in BASELINE_STYLE, using first style")
                self.baseline_style = BASELINE_STYLE[0]
                
        new_idx = (BASELINE_STYLE.index(self.baseline_style) + 1) % len(BASELINE_STYLE)
        self.baseline_style = BASELINE_STYLE[new_idx]        
        return self.baseline_style
        except Exception as e:
            print(f"[ERROR] Error changing baseline: {e}")
            return self.baseline_style
    
    def clear_reaction_notes(self):
        self.reaction_notes.clear()
        return self.reaction_notes

    def append_reaction_notes(self, note):
        self.reaction_notes.append(note)
        return self.reaction_notes


class LightState(object):
    def __init__(self, num_tubes, random_init=True, lights=None):
        # Ensure num_tubes is valid
        num_tubes = max(1, int(num_tubes))
        
        if random_init:
            self.lights = [
                tuple(random.randint(0, 255) for _ in range(3))
                for _ in range(num_tubes)
            ]
        elif lights and len(lights) >= num_tubes:
            self.lights = lights[:num_tubes]  # Take only the first num_tubes elements
        else:
            # Fallback to default values if lights is None or too short
            self.lights = [(0, 0, 0) for _ in range(num_tubes)]

    def __repr__(self):
        return f"{self.lights}"

    def __getitem__(self, indices):
        try:
        if not isinstance(indices, list):
            indices = [indices]
                
            # Filter out invalid indices
            valid_indices = [i for i in indices if 0 <= i < len(self.lights)]
            
            # Get values for valid indices
            ret = [self.lights[i] for i in valid_indices]
            
            # Return single value or list
        if len(ret) == 1:
            return ret[0]
        return ret
        except Exception as e:
            print(f"[ERROR] Error in LightState.__getitem__: {e}")
            # Return safe default
            return (0, 0, 0) if len(indices) == 1 else [(0, 0, 0)]

    def __setitem__(self, key, newvalue):
        try:
            if 0 <= key < len(self.lights):
                # Ensure newvalue is a tuple of 3 values between 0-255
                if isinstance(newvalue, (tuple, list)) and len(newvalue) >= 3:
                    # Clamp values to 0-255
                    h = max(0, min(255, int(newvalue[0])))
                    s = max(0, min(255, int(newvalue[1])))
                    v = max(0, min(255, int(newvalue[2])))
                    self.lights[key] = (h, s, v)
                else:
                    print(f"[WARNING] Invalid light value: {newvalue}, must be tuple/list of 3 integers")
            else:
                print(f"[WARNING] Invalid light index: {key}, must be 0-{len(self.lights)-1}")
        except Exception as e:
            print(f"[ERROR] Error in LightState.__setitem__: {e}")

class Pillar_Mapper_Base(object):

    def __init__(self, cfg, pillar_cfg):
        """Base Class for any mapping function for a single pillar

        Args:
            pillar_cfg (Dict): The configuration file for the pillar
        """
        try:
            # Default to 6 tubes if missing
            self.num_tubes = pillar_cfg.get("num_tubes", 6)
            
            # Initialize SoundState and LightState with defaults from config
            if "default_state" in cfg:
                self.sound_state = SoundState(cfg["default_state"])
            else:
                print("[WARNING] No default_state in config, using built-in defaults")
                self.sound_state = SoundState(None)
                
            self.light_state = LightState(self.num_tubes, random_init=True)
            self.state_array = [False for _ in range(self.num_tubes)]
        except Exception as e:
            print(f"[ERROR] Error initializing Pillar_Mapper_Base: {e}")
            traceback.print_exc()
            # Set safe defaults
            self.num_tubes = 6
            self.sound_state = SoundState(None)
            self.light_state = LightState(self.num_tubes, random_init=True)
        self.state_array = [False for _ in range(self.num_tubes)]

    def update_pillar(self, state_array) -> Tuple[SoundState, LightState]:
        """
        Update pillar state based on new touch state array
        
        Args:
            state_array: Array of boolean values indicating touch state
            
        Returns:
            Tuple of (SoundState, LightState)
        """
        try:
            # Make sure state_array is the right length
            if len(state_array) != len(self.state_array):
                # Truncate or pad with False as needed
                if len(state_array) > len(self.state_array):
                    state_array = state_array[:len(self.state_array)]
                else:
                    state_array = state_array + [False] * (len(self.state_array) - len(state_array))

        # Update internal state
            self.interaction_update_sound_light(self.state_array.copy(), state_array)

            # Store new state for next update
            self.state_array = state_array.copy()  # Make copy to avoid reference issues

        return self.sound_state, self.light_state
        except Exception as e:
            print(f"[ERROR] Error in update_pillar: {e}")
            return self.sound_state, self.light_state

    # This should be implemented in child classes
    def interaction_update_sound_light(self, old_state, new_state):
        # This function takes the tube_id and the current tube states (sound and light)
        # It changes the amplitude, synth and note and color for this pillar
        # Internally changes self.sound_state and self.light_state
        print("[DEBUG] In Pillar Mapper Base - this method should be overridden by child class")

class FixedMapper(Pillar_Mapper_Base):
    def __init__(self, cfg, pillar_cfg):
        super().__init__(cfg, pillar_cfg)
        
        try:
            self.num_tubes = pillar_cfg.get("num_tubes", 6)
            
            # Ensure notes array exists and has correct length
            if "notes" in pillar_cfg:
                self.notes = pillar_cfg["notes"]
                # Pad or truncate to match num_tubes
                if len(self.notes) < self.num_tubes:
                    self.notes = self.notes + [0] * (self.num_tubes - len(self.notes))
                elif len(self.notes) > self.num_tubes:
                    self.notes = self.notes[:self.num_tubes]
            else:
                print("[WARNING] No notes in pillar config, using defaults")
                self.notes = [0, 2, 4, 5, 7, 9][:self.num_tubes]  # Default to major scale
                
            # Default octave is 4 if not specified
            self.octave = pillar_cfg.get("octave", 4)

        # Create a fixed color map from midi note (0-11) to hue (0-255)
            self.fixed_hue_map = getattr(ifc, "FIXED_NOTE_HUE_MAP", {})
            
            # If hue map is empty, create a default one
            if not self.fixed_hue_map:
                print("[WARNING] FIXED_NOTE_HUE_MAP not found in interfaces, creating default")
                self.fixed_hue_map = {i: (i * 21) % 256 for i in range(12)}
        except Exception as e:
            print(f"[ERROR] Error initializing FixedMapper: {e}")
            # Set reasonable defaults
            self.num_tubes = 6
            self.notes = [0, 2, 4, 5, 7, 9]  # Default to major scale
            self.octave = 4
            self.fixed_hue_map = {i: (i * 21) % 256 for i in range(12)}

    # This should be implemented in child classes
    def interaction_update_sound_light(self, old_state, new_state):
        try:
        # Clears the reaction note for the Composer 
        self.sound_state.clear_reaction_notes()

        # If we now detect as active, we add a reaction note and change the light state as specified
        for tube_id, (old_active, active) in enumerate(zip(old_state, new_state)):
                if tube_id >= len(self.notes):
                    continue  # Skip tubes without corresponding notes
                    
            if not old_active and active:
                note = self.notes[tube_id]
                note_to_play = note + self.octave * 12
                self.sound_state.append_reaction_notes(note_to_play)
                    
                    # Get hue from fixed_hue_map or use a default if note not in map
                    hue = self.fixed_hue_map.get(note % 12, (note * 21) % 256)
                    self.light_state[tube_id] = (hue, 255, 255)
        except Exception as e:
            print(f"[ERROR] Error in FixedMapper.interaction_update_sound_light: {e}")

class RotationMapper(Pillar_Mapper_Base):
    def __init__(self, cfg, pillar_cfg):
        super().__init__(cfg, pillar_cfg)

        try:
            # Get tube allocation or use defaults
            if "tube_allocation" in pillar_cfg:
        self.tube_allocation = pillar_cfg["tube_allocation"]
                # Pad or truncate to match num_tubes
                if len(self.tube_allocation) < self.num_tubes:
                    # Default allocations for missing tubes
                    defaults = ["i", "t", "k+", "k-", "m", "s", "b"]
                    self.tube_allocation = self.tube_allocation + defaults[len(self.tube_allocation):self.num_tubes]
                elif len(self.tube_allocation) > self.num_tubes:
                    self.tube_allocation = self.tube_allocation[:self.num_tubes]
            else:
                print("[WARNING] No tube_allocation in pillar config, using defaults")
                # Default allocations: instrument, tempo, key+, key-, melody, scale, baseline
                defaults = ["i", "t", "k+", "k-", "m", "s", "b"]
                self.tube_allocation = defaults[:self.num_tubes]

        # Create a colormap from red to blue scaled between 0 and 255
            try:
        self.cmap = plt.get_cmap('coolwarm')
            except Exception as cmap_error:
                print(f"[WARNING] Failed to get colormap 'coolwarm': {cmap_error}")
                # Create a simple fallback colormap function
                self.cmap = lambda x: (1.0, 0.0, 0.0) if x < 0.5 else (0.0, 0.0, 1.0)
        except Exception as e:
            print(f"[ERROR] Error initializing RotationMapper: {e}")
            # Set safe defaults
            self.tube_allocation = ["i", "t", "k+", "k-", "m", "s"][:self.num_tubes]
            self.cmap = lambda x: (1.0, 0.0, 0.0) if x < 0.5 else (0.0, 0.0, 1.0)

    def interaction_update_sound_light(self, old_state, new_state):
        try:
            # Handle each tube's state
            for tube_id, active in enumerate(new_state):
                if tube_id >= len(self.tube_allocation):
                    continue  # Skip invalid tube indices
                    
                tube_allocation = self.tube_allocation[tube_id]
                
            if active:
                delta = 1 
                    try:
                if 'i' in tube_allocation:
                    value = self.sound_state.change_instrument()
                elif 't' in tube_allocation:
                    value = self.sound_state.change_tempo(delta=5)
                elif 'k+' in tube_allocation:
                    value = self.sound_state.change_key(delta=5)
                elif 'k-' in tube_allocation:
                    value = self.sound_state.change_key(delta=-4)
                elif 'm' in tube_allocation:
                    value = self.sound_state.change_melody()
                elif 's' in tube_allocation:
                    value = self.sound_state.change_scale()
                elif 'b' in tube_allocation:
                    value = self.sound_state.change_baseline()

                        # Generate a random color using the colormap
                        try:
                            color_val = random.random()
                            rgb_color = self.cmap(color_val)[:3]  # Get RGB values
                            hsv_color = rgb_to_hsv(rgb_color)
                            # Create a tuple of HSV values scaled to 0-255
                            hsv_tuple = (
                                int(hsv_color[0] * 255),
                                int(hsv_color[1] * 255),
                                int(hsv_color[2] * 255)
                            )
                            self.light_state[tube_id] = hsv_tuple
                        except Exception as color_error:
                            print(f"[ERROR] Failed to generate color: {color_error}")
                            # Use a simple fallback color
                            self.light_state[tube_id] = (random.randint(0, 255), 255, 255)
                    except Exception as tube_error:
                        print(f"[ERROR] Error processing tube {tube_id} with allocation {tube_allocation}: {tube_error}")
        except Exception as e:
            print(f"[ERROR] Error in RotationMapper.interaction_update_sound_light: {e}")

class EventRotationMapper(Pillar_Mapper_Base):
    def __init__(self, cfg, pillar_cfg):
        super().__init__(cfg, pillar_cfg)

        try:
            # Get tube allocation or use defaults
            if "tube_allocation" in pillar_cfg:
        self.tube_allocation = pillar_cfg["tube_allocation"]
                # Pad or truncate to match num_tubes
                if len(self.tube_allocation) < self.num_tubes:
                    # Default allocations for missing tubes
                    defaults = ["i", "t+", "t-", "k+", "k-", "m", "s", "b"]
                    self.tube_allocation = self.tube_allocation + defaults[len(self.tube_allocation):self.num_tubes]
                elif len(self.tube_allocation) > self.num_tubes:
                    self.tube_allocation = self.tube_allocation[:self.num_tubes]
            else:
                print("[WARNING] No tube_allocation in pillar config, using defaults")
                # Default allocations: instrument, tempo+, tempo-, key+, key-, melody, scale, baseline
                defaults = ["i", "t+", "t-", "k+", "k-", "m", "s", "b"]
                self.tube_allocation = defaults[:self.num_tubes]

        # Create a colormap from red to blue scaled between 0 and 255
            try:
        self.cmap = plt.get_cmap('coolwarm')
            except Exception as cmap_error:
                print(f"[WARNING] Failed to get colormap 'coolwarm': {cmap_error}")
                # Create a simple fallback colormap function
                self.cmap = lambda x: (1.0, 0.0, 0.0) if x < 0.5 else (0.0, 0.0, 1.0)
        except Exception as e:
            print(f"[ERROR] Error initializing EventRotationMapper: {e}")
            # Set safe defaults
            self.tube_allocation = ["i", "t+", "t-", "k+", "k-", "m"][:self.num_tubes]
            self.cmap = lambda x: (1.0, 0.0, 0.0) if x < 0.5 else (0.0, 0.0, 1.0)

    def interaction_update_sound_light(self, old_state, new_state):
        try:
            # Handle each tube's state transition
            for tube_id, (old_active, active) in enumerate(zip(old_state, new_state)):
                if tube_id >= len(self.tube_allocation):
                    continue  # Skip invalid tube indices
                    
                # Only change on a rising edge (0→1)
            if not old_active and active:
                    tube_allocation = self.tube_allocation[tube_id]
                delta = 1 
                    try:
                if 'i' in tube_allocation:
                    value = self.sound_state.change_instrument()
                elif 't+' in tube_allocation:
                    value = self.sound_state.change_tempo(delta=10)
                elif 't-' in tube_allocation:
                    value = self.sound_state.change_tempo(delta=-10)
                elif 'k+' in tube_allocation:
                    value = self.sound_state.change_key(delta=5)
                elif 'k-' in tube_allocation:
                    value = self.sound_state.change_key(delta=-4)
                elif 'm' in tube_allocation:
                    value = self.sound_state.change_melody()
                elif 's' in tube_allocation:
                    value = self.sound_state.change_scale()
                elif 'b' in tube_allocation:
                    value = self.sound_state.change_baseline()

                        # Generate a random color using the colormap
                        try:
                            color_val = random.random()
                            rgb_color = self.cmap(color_val)[:3]  # Get RGB values
                            hsv_color = rgb_to_hsv(rgb_color)
                            # Create a tuple of HSV values scaled to 0-255
                            hsv_tuple = (
                                int(hsv_color[0] * 255),
                                int(hsv_color[1] * 255),
                                int(hsv_color[2] * 255)
                            )
                            self.light_state[tube_id] = hsv_tuple
                        except Exception as color_error:
                            print(f"[ERROR] Failed to generate color: {color_error}")
                            # Use a simple fallback color
                            self.light_state[tube_id] = (random.randint(0, 255), 255, 255)
                    except Exception as tube_error:
                        print(f"[ERROR] Error processing tube {tube_id} with allocation {tube_allocation}: {tube_error}")
        except Exception as e:
            print(f"[ERROR] Error in EventRotationMapper.interaction_update_sound_light: {e}")

class LightSoundMapper(Pillar_Mapper_Base):
    def __init__(self, cfg, pillar_cfg):
        super().__init__(cfg, pillar_cfg)
        
        try:
            # Get essential configuration
            self.num_tubes = pillar_cfg.get("num_tubes", 6)
            
            # Ensure notes array exists and has correct length
            if "notes" in pillar_cfg:
                self.notes = pillar_cfg["notes"]
                # Pad or truncate to match num_tubes
                if len(self.notes) < self.num_tubes:
                    self.notes = self.notes + [0] * (self.num_tubes - len(self.notes))
                elif len(self.notes) > self.num_tubes:
                    self.notes = self.notes[:self.num_tubes]
            else:
                print("[WARNING] No notes in pillar config, using defaults")
                self.notes = [0, 2, 4, 5, 7, 9][:self.num_tubes]  # Default to major scale
                
            # Default octave is 4 if not specified
            self.octave = pillar_cfg.get("octave", 4)
            
            # Create bidirectional mappings
            self.fixed_hue_map = getattr(ifc, "FIXED_NOTE_HUE_MAP", {})
            
            # If hue map is empty, create a default one
            if not self.fixed_hue_map:
                print("[WARNING] FIXED_NOTE_HUE_MAP not found in interfaces, creating default")
                self.fixed_hue_map = {i: (i * 21) % 256 for i in range(12)}
                
            # Create reverse mapping from hue ranges to notes
            self.hue_to_note_map = self._create_hue_to_note_map()
            
            # Keep track of light-driven note changes
            self.light_driven_notes = [None] * self.num_tubes
            
            # Track timestamps for debugging
            self.last_update_time = time.time()
        except Exception as e:
            print(f"[ERROR] Error initializing LightSoundMapper: {e}")
            traceback.print_exc()
            # Set safe defaults
            self.num_tubes = 6
            self.notes = [0, 2, 4, 5, 7, 9]  # Default to major scale
            self.octave = 4
            self.fixed_hue_map = {i: (i * 21) % 256 for i in range(12)}
            self.hue_to_note_map = {i: i // 21 for i in range(256)}
            self.light_driven_notes = [None] * self.num_tubes
            self.last_update_time = time.time()
            
        print(f"[DEBUG] LightSoundMapper initialized with {self.num_tubes} tubes")
        print(f"[DEBUG] Notes config: {self.notes}, Octave: {self.octave}")
        print(f"[DEBUG] Hue-to-note map created with {len(set(self.hue_to_note_map.values()))} unique semitones")
    
    def _create_hue_to_note_map(self):
        """Create a mapping from hue values (0-255) to semitones (0-11)"""
        try:
            # Create 12 equal-sized bins for the hue values
            bin_size = 256 // 12
            hue_to_note = {}
            
            for note in range(12):
                # Calculate the hue range for this note
                min_hue = note * bin_size
                max_hue = (note + 1) * bin_size - 1
                if note == 11:  # Make sure the last bin includes 255
                    max_hue = 255
                    
                # Map each hue in this range to the note
                for hue in range(min_hue, max_hue + 1):
                    hue_to_note[hue] = note
            
            print(f"[DEBUG] Hue-to-note mapping created: bin_size={bin_size}")
            print(f"[DEBUG] Example mappings: hue 0 -> {hue_to_note[0]}, hue 127 -> {hue_to_note[127]}, hue 255 -> {hue_to_note[255]}")
                    
            return hue_to_note
        except Exception as e:
            print(f"[ERROR] Error creating hue-to-note map: {e}")
            # Return a simple default mapping
            return {i: (i * 12) // 256 for i in range(256)}
    
    def hue_to_semitone(self, hue):
        """Convert a hue value (0-255) to a semitone (0-11)"""
        try:
            # Simple direct mapping - divide the hue range into 12 equal parts
            if hue < 0:
                hue = 0
            if hue > 255:
                hue = 255
            
            # Map 0-255 to 0-11 range
            semitone = (hue * 12) // 256
            
            print(f"[MAPPING] Hue {hue} maps to semitone {semitone} (octave {self.octave})")
            return semitone
        except Exception as e:
            print(f"[ERROR] Error in hue_to_semitone: {e}")
            # Return a safe default
            return 0
    
    def update_from_light_status(self, light_status):
        """
        Update sound based on changes in light status
        
        Args:
            light_status: List of (hue, brightness, effect) tuples for each tube
        
        Returns:
            Updated SoundState object
        """
        try:
            current_time = time.time()
            time_since_last = current_time - self.last_update_time
            print(f"[DEBUG] update_from_light_status called, {time_since_last:.2f}s since last update")
            self.last_update_time = current_time
            
            # Clear previous reaction notes
            self.sound_state.clear_reaction_notes()
            
            # Guard against invalid light_status
            if not light_status or len(light_status) == 0:
                print("[WARNING] Empty light_status provided to update_from_light_status")
                return self.sound_state
                
            # Track which tubes have active lights
            active_tubes = 0
            
            # Process each tube's light status
            for tube_id, status in enumerate(light_status):
                if tube_id >= len(self.light_driven_notes):
                    continue  # Skip invalid tube indices
                    
                # Ensure status is valid
                if not isinstance(status, (tuple, list)) or len(status) < 2:
                    continue
                    
                hue, brightness = status[0], status[1]
                
                # Skip tubes with no brightness
                if brightness < 20:
                    continue
                    
                active_tubes += 1
                
                # Convert hue to semitone
                semitone = self.hue_to_semitone(hue)
                
                # Calculate full note with octave
                note_to_play = semitone + self.octave * 12
                
                # Add to reaction notes if different from previous
                if note_to_play != self.light_driven_notes[tube_id]:
                    self.sound_state.append_reaction_notes(note_to_play)
                    self.light_driven_notes[tube_id] = note_to_play
                    print(f"[DEBUG] Tube {tube_id}: Hue {hue} → Semitone {semitone} → Note {note_to_play}")
            
            print(f"[DEBUG] {active_tubes} tubes active, {len(self.sound_state.reaction_notes)} new reaction notes")
            return self.sound_state
        except Exception as e:
            print(f"[ERROR] Error in update_from_light_status: {e}")
            return self.sound_state
    
    def interaction_update_sound_light(self, old_state, new_state):
        """Handle button press interactions"""
        try:
            # Clears the reaction note for the Composer 
            self.sound_state.clear_reaction_notes()
    
            # This method is intentionally empty for LightSoundMapper
            # Touch-triggered notes are handled in main.py based on the current light hue
            
            # Uncomment for debugging specific edge cases
            # print(f"[DEBUG] LightSoundMapper.interaction_update_sound_light called with old_state={old_state}, new_state={new_state}")
            
            pass  # Keep the method structure but do nothing for touch events here
        except Exception as e:
            print(f"[ERROR] Error in LightSoundMapper.interaction_update_sound_light: {e}")

def generate_mapping_interface(cfg, cfg_pillar) -> Pillar_Mapper_Base:
    """Generator Function which you can call which reads the config
    And assigns the correct mapping class based on the configuration file "map"

    Args:
        pillar_id (int): The Pillar Number
        cfg (Dict): The configuration file for the pillars

    Returns:
        Pillar_Mapper_Base: A Child class of Pillar_Mappper_Base which is specified in the 'map' parameter of the configuration file if it exists.
    """
    try:
        # Check if the map key exists
        if "map" not in cfg_pillar:
            print("[WARNING] No 'map' key in pillar config, using FixedMapper as fallback")
            return FixedMapper(cfg, cfg_pillar)
            
        # Get the mapping class name
        map_class_name = cfg_pillar['map']
        
        # Check if the class exists in the current module
        if map_class_name not in globals():
            print(f"[WARNING] Mapping class '{map_class_name}' not found, using FixedMapper as fallback")
            return FixedMapper(cfg, cfg_pillar)
            
        # Get the class and instantiate it
        targetClass = globals()[map_class_name]
        print(f"[INFO] Creating mapping interface: {map_class_name}")
    return targetClass(cfg, cfg_pillar)
    except Exception as e:
        print(f"[ERROR] Error creating mapping interface: {e}")
        # Default to FixedMapper as fallback
        print("[INFO] Using FixedMapper as fallback due to error")
        return FixedMapper(cfg, cfg_pillar)

